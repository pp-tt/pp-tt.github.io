<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on 噗通 🍀</title>
    <link>https://pp-tt.github.io.git/notes/swift/</link>
    <description>Recent content in Swift on 噗通 🍀</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://pp-tt.github.io.git/notes/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/swift/swiftui-%E5%B8%B8%E7%94%A8%E8%A7%86%E5%9B%BE-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/swift/swiftui-%E5%B8%B8%E7%94%A8%E8%A7%86%E5%9B%BE-views/</guid>
      <description>SwiftUI 的常用视图 # 1 文本视图 # 1.1 文本 Text # Text(&amp;#34;文字&amp;#34;) 1.2 标签 Label # Label(&amp;#34;文字&amp;#34;, systemImage: &amp;#34;SF Symbols 图标名称&amp;#34;) 1.3 文本框 TextField # @State var input = &amp;#34;&amp;#34; var body: some View { TextField(&amp;#34;占位文字&amp;#34;, text: $input) } 1.4 安全文本框 SecureField # @State var input = &amp;#34;&amp;#34; var body: some View { SecureField(&amp;#34;占位文字&amp;#34;, text: $input) } 1.5 链接 Link # Link(&amp;#34;说明文字&amp;#34;, destination: URL(string: &amp;#34;https://baidu.com&amp;#34;)!) 1.6 文本编辑器 # @State var input = &amp;#34;&amp;#34; var body: some View { TextEditor(text: $input) } 2 排版视图 # 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/swift/swiftui-%E4%BF%A1%E6%81%AF%E8%A7%86%E5%9B%BE-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/swift/swiftui-%E4%BF%A1%E6%81%AF%E8%A7%86%E5%9B%BE-views/</guid>
      <description>SwiftUI 信息视图 Views # 列表 List # List { FirstView() SecondView() } 观察上图，会发现高亮区域的每一个子视图中间都有一条横线，该分割线是 SwiftUI 列表的一部分，会由系统负责自动添加。列表的语法是 List { }，其中花括号区域放置子视图即可。我把上一篇文章中制作的子视图 CardView() 放置在列表中，结果如下图所示。子视图被从上至下罗列出来，中间还被添加了分割线。
网格 Grid # let rule = [GridItem(.adaptive(minimum: 220))] var body: some View { LazyVGrid(columns: rule, spacing: 20) { } } 循环 ForEach # var targetDurations = [&amp;#34;15 分钟&amp;#34;, &amp;#34;30 分钟&amp;#34;, &amp;#34;1 小时&amp;#34;, &amp;#34;2 小时&amp;#34;,&amp;#34;3 小时&amp;#34;] var body: some View { VStack { ForEach(0..&amp;lt;targetDurations.count) { Text(self.targetDurations[$0]) } } } 成组框 GroupBox # GroupBox(label: Label(&amp;#34;创作简介&amp;#34;, systemImage: &amp;#34;pencil.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/swift/swiftui-%E5%B1%82%E7%BA%A7%E8%A7%86%E5%9B%BE-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/swift/swiftui-%E5%B1%82%E7%BA%A7%E8%A7%86%E5%9B%BE-views/</guid>
      <description>SwiftUI 层级视图 Views # 官方文档
TabView { Text(&amp;#34;1.选项卡内容&amp;#34;) .tabItem { Image(systemName: &amp;#34;scroll&amp;#34;) Text(&amp;#34;Scroll&amp;#34;) } Text(&amp;#34;2.选项卡内容&amp;#34;) .tabItem { Image(systemName: &amp;#34;network&amp;#34;) Text(&amp;#34;Navigation&amp;#34;) } } ![](https://gitee.com/pp-tt/blogImage/raw/master/202202211646718.png) ### 滑动视图 ScrollView [官方文档](https://developer.apple.com/documentation/swiftui/scrollview) ```swift ScrollView(.vertical, showsIndicators: false) { } 导航器 NavigationView # 官方文档
NavigationView { VStack { VStack(spacing: 30) { NavigationLink(destination: SomeView()) { Text(&amp;#34;点击跳转&amp;#34;) } } } .navigationBarTitle(&amp;#34;项目列表&amp;#34;, displayMode: .automatic)) .navigationBarItems( leading: Button(&amp;#34;左侧按钮&amp;#34;) { }, trailing: Button(&amp;#34;右侧按钮&amp;#34;) { } ) } **为导航器视图添加标题：**为导航器添加标题的语法是 .navigationBarTitle(&amp;quot;项目列表&amp;quot;, displayMode: .automatic))，可以理解为添加一个名为「项目列表」的标题，并自动设置标题的字体。若你需要如上图所示的加粗大字体，则可以将 displayMode 的参数设置为 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/swift/swiftui-%E6%8E%A7%E5%88%B6%E8%A7%86%E5%9B%BE-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/swift/swiftui-%E6%8E%A7%E5%88%B6%E8%A7%86%E5%9B%BE-views/</guid>
      <description>SwiftUI 控制视图 Views # 开关 Toggle # @State var toggleValue = true var body: some View { Toggle(&amp;#34;自动登录&amp;#34;, isOn: $toggleValue) } 按钮 Button # Button(action: { // 此处放置你希望按钮做什么 }, label: { // 此处定制按钮外观 Text(&amp;#34;退出&amp;#34;) }) 选择器 Picker # @State var pickerValue = 0 var pickerOptions = [&amp;#34;步行&amp;#34;, &amp;#34;自行车&amp;#34;, &amp;#34;汽车&amp;#34;] var body: some View { Picker(&amp;#34;Picker&amp;#34;, selection: $pickerValue) { ForEach(0..&amp;lt;pickerOptions.count) { index in Text(pickerOptions[index]).tag(index) } }.pickerStyle(SegmentedPickerStyle()) } 滑动条 Slider # @State var sliderValue = 0.</description>
    </item>
    
  </channel>
</rss>
