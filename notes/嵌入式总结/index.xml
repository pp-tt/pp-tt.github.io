<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>嵌入式重点总结 on 噗通 🍀</title>
    <link>https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 嵌入式重点总结 on 噗通 🍀</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/c/</guid>
      <description>C 语言中 ## 和 # 的区别 # ## 操作符 # ## 操作符（Token Pasting Operator）：在宏定义中，**## 可以将两个标识符（tokens）粘合在一起，形成一个新的标识符。**例如，如果有以下宏定义：
#define CONCAT(a, b) a##b 那么，当你调用 CONCAT 宏并传递两个参数时，它会将这两个参数的内容合并成一个新的标识符：
CONCAT(foo, bar); // 最终的标识符为 &amp;#34;foobar&amp;#34; # 操作符 # # 操作符（Stringizing Operator）：在宏定义中，# 可以将宏参数转化为字符串常量。例如，如果有以下宏定义：
#define STRINGIFY(x) #x 那么，当你调用 STRINGIFY 宏并传递一个参数时，它会将参数转换为字符串常量：
printf(&amp;#34;%s\n&amp;#34;, STRINGIFY(Hello)); // 输出 &amp;#34;Hello&amp;#34; # 操作符的作用是将参数的内容用双引号包裹起来，将其转化为字符串。
实验 # 实验如下：
#include &amp;lt;stdio.h&amp;gt; #define GENSTR(x) #x #define CONCAT(a, b) a##b int main() { // ## 实验 int foobar = 5; printf(&amp;#34;%d\n&amp;#34;, CONCAT(foo, bar)); // # 实验 printf(&amp;#34;%s\n&amp;#34;, GENSTR(String)); return(0); } 输出结果：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/notes/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%80%BB%E7%BB%93/stm32/</guid>
      <description>中断系统 # 中断概念 # 中断 # 在主程序运行过程中，出现了特定的中断触发条件（中断源），使得CPU暂停当前正在运行的程序，转而去处理中断程序， 处理完成后又返回原来被暂停的位置继续运行。
中断优先级 # 当有多个中断源同时申请中断时，CPU会根据中断源的轻重缓急进行裁决，优先响应更加紧急的中断源。
中断嵌套 # 当一个中断程序正在运行时，又有新的更高优先级的中断源申请中断，CPU再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次进行返回
STM32中断 # STM32中断优先级非常多，几乎所有的模块都能申请中断。
68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等。 使用NVIC（嵌套中断向量控制器）统一管理中断，每个中断通道拥有16个可编程优先级，可对优先级进行分组，进一步设置抢占优先级和响应优先级。 NVIC中断优先级有优先级寄存器的4位（0～15，0优先级最高）决定，这四位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级。 抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断向量表中断号排队。 EXTI 外部中断 # EXTI 外部中断概念 # EXTI 可以监测指定 GPIO 口的电平信号，当其指定的 GPIO 产生电平变化时，EXTI将立即向 NVIC 发出中断申请，经过 NVIC 裁决后即可中断 CPU 主程序，使 CPU 执行 EXTI 对应的中断程序。外部中断是众多能产生中断的外设之一。
触发方式 # 支持上升沿、下降沿、双边沿、软件触发。
支持的 GPIO 口 # 支持所有 GPIO 口，但是相同的 Pin 不能同时触发中断。
通道数 # 16 个 GPIO_Pin，外加 PVD 输出、RTC闹钟、USB唤醒、以太网唤醒
触发响应方式 # 中断响应和事件响应，中断响应是正常流程，引脚变化触发中断；事件响应不会触发中断，而是触发别的外设操作，属于外设之间的联合工作。
外部中断/事件控制器框图：
整体结构图：
其中 AFIO 为中断引脚选择模块，AFIO 主要用于引脚复用的选择和重定义，STM32中AFIO主要完成两个任务：复用功能引脚重映射、中断引脚选择。外部中断9~5会触发同一个中断函数，15～10也会触发同一中断函数。针对这两个中断函数，需要根据标志位来区分是哪个中断进来的。</description>
    </item>
    
  </channel>
</rss>
