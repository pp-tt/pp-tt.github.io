<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂乱问题 on 噗通 🍀</title>
    <link>https://pp-tt.github.io.git/solution/problems/</link>
    <description>Recent content in 杂乱问题 on 噗通 🍀</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://pp-tt.github.io.git/solution/problems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/solution/problems/brew-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/solution/problems/brew-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>brew 的一些常用命令 # 安装卸载软件 # brew &amp;ndash;version 或者 brew -v 显示brew版本信息 brew install 安装指定软件 brew uninstall 卸载指定软件 brew list 显示所有的已安装的软件 brew search text 搜索本地远程仓库的软件，已安装会显示绿色的勾 brew search /text/ 使用正则表达式搜软件 brew info 显示指定软件信息 brew reinstall 重新安装指定软件，先卸载后安装 brew install &amp;ndash;build-from-source 源码安装指定软件，可以给定指定参数 brew commands 列出所有可用命令 2、升级软件相关 # brew update 自动升级homebrew （从github下载最新版本） brew outdated 检测已经过时的软件 brew upgrade 升级所有已过时的软件，即列出的以过时软件 brew upgrade 升级指定的软件 brew pin 禁止指定软件升级 brew unpin 解锁禁止升级 brew upgrade &amp;ndash;all 升级所有的软件包，包括未清理干净的旧版本的包 brew edit 编辑软件，不会的情况下慎用 brew tap 列出本地资源仓库，其中 homebrew 是默认仓库，其它都是第三方仓库 brew tap &amp;lt;user/repo&amp;gt; 添加第三方仓库，命名的规则按照github来定的。 brew untap &amp;lt;user/repo&amp;gt; 删除仓库 brew deps 查看指定软件依赖于哪些软件 brew uses 查看指定软件被哪些软件所依赖 清理相关 # homebrew再升级软件时候不会清理相关的旧版本，在软件升级后我们可以使用如下命令清理</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/solution/problems/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/solution/problems/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>docker 的一些常用命令 # 镜像： # 列出本机的所有 image 文件。 # $ docker image ls == docker images
删除 image 文件 # $ docker image rm [imageName]
拉取镜像 # $ docker image pull 组/名:版本号
删除镜像 # $ docker rmi 镜像:版本号 == docker rmi id
查看所有镜像id # $ docker images -q
删除所有镜像 # $ docker rmi ‘docker images -q’
容器： # 创建容器 -i 一直运行 -t为终端 /bin/bash 进入容器的初始化指令 # $ docker run -it —name 容器名 镜像名:版本号 /bin/bash</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/solution/problems/git-github-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/solution/problems/git-github-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
      <description>Git-GitHub-相关命令整理 # Git # git config --global user.name 用户名&amp;amp;git config --global user.mail 邮箱：用于区分不同操作者的身份，知道本次操作是谁做的，与GitHub的登录账号无关。 git init：初始化本地仓库（新增.git文件夹，内容谨慎修改） git status：查看当前状态（git是按照行来维护文件的） git add 文件名：将文件提交到暂存区 git rm --cache 文件名：将暂存区文件删除 git commit -m &#39;message&#39; 文件：将暂存区文件提交到本地库 git reflog：查看前7位版本号，分支指向 git log：查看详细信息，包括谁提交的，完整的版本号等 git reset --hard &#39;版本号&#39;：切换版本，本质是移动HEAD指针，.git/HEAD文件内容显示指向的分支，.git/refs/heads显示指向的分支版本。 git branch -v：查看分支 git branch 分支名：创建分支 git checkout 分支名：切换分支 git merge 分之名：合并指定分支到当前分支上，若出现冲突，&amp;lt;&amp;lt;&amp;lt; HEAD与===之间的内容表示当前分支内容，===与&amp;gt;&amp;gt;&amp;gt;***之间的内容表示指定分支内容。冲突处理步骤如下： 1. 修改冲突 2. 添加暂存区 3. git commit -m &#39;message&#39;注意不用带文件名，因为这时为合并状态 GitHub # git psuh：将提交内容推送到库，项目团队人员可用，否则无法push，团队外成员需要先fork自己的GitHub git remote -v：查看当前所有别名 git remote add 别名 链接：起别名 git push 别名 master：本地master分支推送到远程仓库 git pull 别名 分支：拉取仓库（尽量随时让本地仓库保持最新状态） git clone 链接：无需登录账号，做了以下三件事： 拉取代码 初始化本地仓库 起好别名：origin ssh-keygen -t rsa -C 邮箱：ssh免密登陆，~/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pp-tt.github.io.git/solution/problems/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%AB%E7%9B%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pp-tt.github.io.git/solution/problems/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%AB%E7%9B%B2/</guid>
      <description>计算机网络 # OSI 七层模型及其作用？ # 应用层：为计算机用户提供服务
表示层：数据处理（编解码、加密解密、压缩解压缩）
会话层：管理（建立、维护、重连）应用程序之间的会话
传输层：为两台主机进程之间的通信提供通用的数据传输服务
网络层：路由和寻址(決定数据在网络的游走路径）
数据链路层：帧编码和误差纠正控制
物理层：透明地传送比特流传输
TCP/IP 四层体系分层结构？ # 应用层：为计算机用户提供服务 传输层：为两台主机进程之间的通信提供通用的数据传输服务 网络层：路由和寻址(決定数据在网络的游走路径） 网络接口层：透明地传送比特流传输 三次握手的过程？ # 一次握手:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&amp;gt; 服务端，然后客户端进入 SYN_SEND 状态，等待服务器的确认； 二次握手:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 –&amp;gt; 客户端,然后服务端进入 SYN_RECV 状态 三次握手:客户端发送带有 ACK(ACK=y+1) 标志的数据包 –&amp;gt; 服务端，然后客户端和服务器端都进入ESTABLISHED 状态，完成TCP三次握手。 为什么要三次握手? # 确定自己和对方的发送与接收都是正常的。
解释一下四次挥手？ # 第一次挥手 ：客户端发送一个 FIN（SEQ=X） 标志的数据包-&amp;gt;服务端，用来关闭客户端到服务器的数据传送。然后，客户端进入 FIN-WAIT-1 状态。 第二次挥手 ：服务器收到这个 FIN（SEQ=X） 标志的数据包，它发送一个 ACK （SEQ=X+1）标志的数据包-&amp;gt;客户端 。然后，此时服务端进入CLOSE-WAIT状态，客户端进入FIN-WAIT-2状态。 第三次挥手 ：服务端关闭与客户端的连接并发送一个 FIN (SEQ=y)标志的数据包-&amp;gt;客户端请求关闭连接，然后，服务端进入LAST-ACK状态。 第四次挥手 ：客户端发送 ACK (SEQ=y+1)标志的数据包-&amp;gt;服务端并且进入TIME-WAIT状态，服务端在收到 ACK (SEQ=y+1)标志的数据包后进入 CLOSE 状态。此时，如果客户端等待 2MSL 后依然没有收到回复，就证明服务端已正常关闭，随后，客户端也可以关闭连接了。 为什么要四次挥手？ # TCP是全双工通信，可以双向传输数据。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</description>
    </item>
    
  </channel>
</rss>
